pipeline {
    agent any

    environment {
        VERSION = "1.0.${BUILD_NUMBER}"
        PATH = "${PATH}:${getSonarPath()}:${getDockerPath()}"
    }

    stages {
        stage('SonarQube Scan') {
            steps {
                script {
                    def scannerHome = tool 'sonarqube'
                    withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]) {
                        withSonarQubeEnv('SonarQubeScanner') {
                            sh """
                                ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=CliXX-APP-DELLA \
                                -Dsonar.login=${SONAR_TOKEN}
                            """
                        }
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 3, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def dockerHome = tool 'docker-inst'
                    sh "${dockerHome}/bin/docker build . -t clixx-image:$VERSION"
                }
            }
        }

        stage('Starting Docker Image') {
            steps {
                sh '''
                    if docker ps | grep clixx-cont; then
                        echo "Docker container exists, stopping and removing it."
                        docker stop clixx-cont
                        docker rm clixx-cont
                    fi
                    docker run --name clixx-cont -p 80:80 -d clixx-image:$VERSION
                '''
            }
        }
    }
}

// Define helper functions outside the pipeline block
def getSonarPath() {
    def SonarHome = tool name: 'sonarqube', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
    return SonarHome
}

def getDockerPath() {
    def DockerHome = tool name: 'docker-inst', type: 'hudson.plugins.docker.DockerTool'
    return DockerHome
}
